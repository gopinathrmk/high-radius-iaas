# THIS FILE IS AUTOMATICALLY GENERATED.
# Disclaimer: Please test this file before using in production.
"""
Generated blueprint DSL (.py)
"""

import json  # no_qa
import os  # no_qa

from calm.dsl.builtins import *  # no_qa


# Secret Variables

#BP_CRED_DB_SERVER_KEY = read_local_file("BP_CRED_DB_SERVER_KEY")
BP_CRED_DB_SERVER_BASIC_PASSWORD = read_local_file("BP_CRED_DB_SERVER_BASIC_PASSWORD")
BP_CRED_PC_PASSWORD = read_local_file("BP_CRED_PC_PASSWORD")
BP_CRED_NDB_PASSWORD = read_local_file("BP_CRED_NDB_PASSWORD")
Profile_NC2_AWS_Action_Clone_variable_CLONE_ROOT_PASS = read_local_file(
    "Profile_NC2_AWS_Action_Clone_variable_CLONE_ROOT_PASS"
)
Profile_NC2_AWS_Action_Restore_variable_CLONE_ROOT_PASS = read_local_file(
    "Profile_NC2_AWS_Action_Restore_variable_CLONE_ROOT_PASS"
)
Profile_NC2_AWS_variable_DB_PASS = read_local_file("Profile_NC2_AWS_variable_DB_PASS")

# Credentials
BP_CRED_DB_SERVER_BASIC = basic_cred(
    "era",
    BP_CRED_DB_SERVER_BASIC_PASSWORD,
    name="DB_SERVER_BASIC",
    type="PASSWORD",
    default=True,
    editables={"username": False, "secret": True},
)
BP_CRED_PC = basic_cred(
    "admin",
    BP_CRED_PC_PASSWORD,
    name="PC",
    type="PASSWORD",
)
BP_CRED_NDB = basic_cred(
    "admin",
    BP_CRED_NDB_PASSWORD,
    name="NDB",
    type="PASSWORD",
)


class NDB_Service(Service):

    CLEANUP_OPERATION_ID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    DELETE_DB_OPERATION_ID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    CLUSTER_ID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    COMPUTE_PROF_ID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    CREATE_OPERATION_ID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    TIME_MACHINE_ID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    DB_ENTITY_NAME = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )
    DB_NAME = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    DB_ID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    DB_PARAM_ID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    REGISTER_OPERATION_ID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    DEREGISTER_OPERATION_ID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    NETWORK_PROF_ID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    SLA_ID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    SOFTWARE_PROF_VERSION_ID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    SOFTWARE_PROF_ID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    DB_SERVER_ID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    DB_SERVER_IP = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    DB_SNAPSHOT_ID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    PC_VM_UUID = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    INNODB_POOL_SIZE = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    DB_SOFT_DIR = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    FINAL_RAM = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    FINAL_SOCKET = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )

    FINAL_CORES = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )
    resource_service = CalmVariable.Simple(
        "", label="", is_mandatory=False, is_hidden=False, runtime=False, description=""
    )


class NDB_Provisioning(Substrate):

    os_type = "Linux"
    provider_type = "EXISTING_VM"
    provider_spec = read_provider_spec(
        os.path.join("specs", "NDB_Provisioning_provider_spec.yaml")
    )

    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=True,
        retries="5",
        connection_port=22,
        address="ndb.nutanix.local",
        delay_secs="30",
    )


class MySQL_VM(Substrate):

    os_type = "Linux"
    provider_type = "EXISTING_VM"
    provider_spec = read_provider_spec(
        os.path.join("specs", "MySQL_VM_provider_spec.yaml")
    )

    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=False,
        retries="5",
        connection_port=22,
        address="@@{ip_address}@@",
        delay_secs="30",
    )


class MySQL(Service):

    dependencies = [ref(NDB_Service)]


class NDB_PKG(Package):

    services = [ref(NDB_Service)]

    @action
    def __install__():
        CalmTask.SetVariable.escript(
            name="GetDatabaseInfo",
            filename=os.path.join(
                "scripts", "Package_NDB_PKG_Action___install___Task_GetCloneInfo.py"
            ),
            target=ref(NDB_Service),
            variables=[
                "DB_ID",
                "TIME_MACHINE_ID",
                "DB_SERVER_ID",
                "DB_SERVER_IP",
                "PC_VM_UUID",
                "CLUSTER_ID",
                "DB_NAME",
                "DB_ENTITY_NAME"
            ],
        )

    @action
    def __uninstall__():

        CalmTask.SetVariable.escript(
            name="CleanupDB",
            filename=os.path.join(
                "scripts", "Package_NDB_PKG_Action___uninstall___Task_CleanupDB_Clone.py"
            ),
            target=ref(NDB_Service),
            variables=["CLEANUP_OPERATION_ID"],
        )

        CalmTask.Exec.escript(
            name="MonitorCleanupOp",
            filename=os.path.join(
                "scripts",
                "monitor_cleanup_db.py",
            ),
            target=ref(NDB_Service),
        )

        CalmTask.Exec.escript(
            name="ShutdownDBServer",
            filename=os.path.join(
                "scripts",
                "Package_NDB_PKG_Action___uninstall___Task_ShutdownDBServer.py",
            ),
            target=ref(NDB_Service),
        )

        CalmTask.SetVariable.escript(
            name="Delete DB Server VM",
            filename=os.path.join(
                "scripts", "delete_db_server_vm.py"
            ),
            target=ref(NDB_Service),
            variables=["DELETE_DB_OPERATION_ID"],
        )

        CalmTask.Exec.escript(
            name="Monitor Delete DB Server",
            filename=os.path.join(
                "scripts", "monitor_delete_db_server.py",
            ),
            target=ref(NDB_Service),
        )



class MySQL_PKG(Package):

    services = [ref(MySQL)]

    @action
    def __install__():

        CalmTask.Exec.ssh(
            name="Configure Hostname and Timezone ",
            filename=os.path.join(
                "scripts",
                "configure_hostname_timezone.sh",
            ),
            cred=ref(BP_CRED_DB_SERVER_BASIC),
            target=ref(MySQL),
        )

        CalmTask.Delay(name="Wait", delay_seconds=60, target=ref(MySQL))



class f9a4c530_deployment(Deployment):

    min_replicas = "1"
    max_replicas = "1"
    default_replicas = "1"

    packages = [ref(NDB_PKG)]
    substrate = ref(NDB_Provisioning)


class _66f2fcac_deployment(Deployment):

    name = "66f2fcac_deployment"
    min_replicas = "1"
    max_replicas = "1"
    default_replicas = "1"

    packages = [ref(MySQL_PKG)]
    substrate = ref(MySQL_VM)


class NC2_AWS(Profile):

    deployments = [f9a4c530_deployment, _66f2fcac_deployment]


    domain_name = CalmVariable.Simple(
        "subdomain.domain.com",
        label="Domain Name",
        is_mandatory=True,
        is_hidden=False,
        runtime=True,
        description="Enter the domain name. Format: subdomain.domain.com",
    )  

    DB_VM_TZ = CalmVariable.Simple(
        "America/Chicago",
        label="DB VM TimeZone ",
        is_mandatory=True,
        is_hidden=True,
        runtime=False,
        description="",
    )

    NDB_public_key = CalmVariable.Simple(
        "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC4Uh4sTFla3SJTKl9UQn8kShGo8ndvZwvx2nqmU8g1FSE3V5E3umXsHEdU5E/6t2pIHEVZSZDwRbDgC2q5vALpLaz7KtfzgbwBHQtgiVTOht1dZLSSi99iGZyO4lYXF50BXAjEJXsQXzNAMLVNfTNWcQfPAGuPwYVhzVMcQjSxS4jlnG3sHa+cLodAhiE4aaRnB1rdqBgJqgQHCFEU0Fd4EQRQNrT9dyS9Dm3eC03PKBq8nnTy1ldM4IlUzm18LqkgWSUbRJSwcwvvXCjhaaxAnO7ge53qA3w1WYMhLIIJfx0LLIa8Yn2Xzxo1aqkHTtHrpV9k7bSF3AO2RhaWGjbj era@mysqlsource",
        label="",
        is_mandatory=False,
        is_hidden=True,
        runtime=False,
        description="",
    )
    NDB_IP = CalmVariable.Simple(
        "10.136.232.103",
        label="",
        is_mandatory=False,
        is_hidden=True,
        runtime=False,
        description="",
    )

    PC_IP = CalmVariable.Simple(
        "10.136.232.39",
        label="",
        is_mandatory=False,
        is_hidden=True,
        runtime=False,
        description="",
    )    

    @action
    def UpdateConfig(name="Update Config of VM"):
        """Scale Compute And Configure MySQL innodb_buffer_pool_size in my.cnf"""

      
        RAM = CalmVariable.Simple.int(
            "0",
            label="RAM To Add/Decrease (GB)",
            regex="^[\d]*$",
            validate_regex=False,
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="",
        )


        CPU = CalmVariable.Simple.int(
            "0",
            label="Number of CPU To Add/Decrease",
            regex="^[\d]*$",
            validate_regex=False,
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="",
        )

        resource = CalmVariable.WithOptions(
            ["CPU","RAM","Both"],
            default = "Both",
            label="Resource",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )

        action = CalmVariable.WithOptions(
            ["Increase","Decrease"],
            default = "Increase",
            label="Resource action",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )

        CalmTask.SetVariable.escript(
            name="Validate Request",
            filename=os.path.join(
                "scripts", "validate_update_config.py"
            ),
            target=ref(NDB_Service),
            variables=[ "DB_SOFT_DIR", "INNODB_POOL_SIZE","FINAL_RAM","FINAL_SOCKET","FINAL_CORES" ],
        )

        CalmTask.Exec.escript(
            name="Update Config",
            filename=os.path.join(
                "scripts", "update_config.py"
            ),
            target=ref(NDB_Service)
        )

        CalmTask.Delay(name="Wait", delay_seconds=30, target=ref(NDB_Service))

        CalmTask.Exec.ssh(
            name="Configure DB Parameters",
            filename=os.path.join(
                "scripts",
                "Profile_NC2_AWS_Action_ScaleCompute_Task_ConfigureDBParameters_update.sh",
            ),
            cred=ref(BP_CRED_DB_SERVER_BASIC),
            target=ref(MySQL),
        )

    @action
    def ScaleDataArea(name="Scale Data Area"):
        """Increase log and data area VGs"""

        DISK = CalmVariable.Simple.int(
            "0",
            label="Disk To Add (GB)",
            regex="^[\d]*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        CalmTask.Exec.escript(
            name="Check",
            filename=os.path.join(
                "scripts", "Profile_NC2_AWS_Action_ScaleDataArea_Task_Check.py"
            ),
            target=ref(NDB_Service),
        )

        CalmTask.Exec.escript(
            name="Expand VG Disks",
            filename=os.path.join(
                "scripts", "Profile_NC2_AWS_Action_ScaleDataArea_Task_ExpandVGDisks.py"
            ),
            target=ref(NDB_Service),
        )

        CalmTask.Delay(name="Wait", delay_seconds=20, target=ref(NDB_Service))

        CalmTask.Exec.ssh(
            name="Expand LV OS",
            filename=os.path.join(
                "scripts", "Profile_NC2_AWS_Action_ScaleDataArea_Task_ExpandLVOS.sh"
            ),
            cred=ref(BP_CRED_DB_SERVER_BASIC),
            target=ref(MySQL),
        )

    @action
    def DBServerPowerAction(name="DB Server Power Action"):
        """Shutdown, Power on, Reboot DB server"""

        POWER_ACTION = CalmVariable.WithOptions(
            ["Shutdown", "Reboot", "Power On"],
            label="Select Power Action",
            default="Shutdown",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        CalmTask.Exec.escript(
            name="PowerAction",
            filename=os.path.join(
                "scripts",
                "Profile_NC2_AWS_Action_DBServerPowerAction_Task_PowerAction.py",
            ),
            target=ref(NDB_Service),
        )




class NDBMySQL(Blueprint):
    """Manage the Cloned Instance of Mysql DB via NDB"""

    services = [NDB_Service, MySQL]
    packages = [NDB_PKG, MySQL_PKG]
    substrates = [NDB_Provisioning, MySQL_VM]
    profiles = [NC2_AWS]
    credentials = [BP_CRED_DB_SERVER_BASIC, BP_CRED_PC, BP_CRED_NDB]
